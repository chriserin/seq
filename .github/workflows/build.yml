name: Build

on:
  workflow_dispatch:

env:
  GO_VERSION: '1.24'

jobs:
  # Test and build Linux
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build with Docker
        run: |
          docker build -t seq-builder .
          docker create --name seq-temp seq-builder
          docker cp seq-temp:/seq ./seq-linux-amd64
          docker rm seq-temp
          chmod +x seq-linux-amd64

      - name: Test binary
        run: |
          ./seq-linux-amd64 --version || echo "Linux binary test completed"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: seq-linux-amd64-${{ github.sha }}
          path: seq-linux-amd64

  # Test and build macOS
  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build Lua from source
        run: |
          # Download and extract Lua 5.4.7
          curl -L -o lua-5.4.7.tar.gz https://www.lua.org/ftp/lua-5.4.7.tar.gz
          tar -xzf lua-5.4.7.tar.gz
          cd lua-5.4.7

          # Set architecture-specific compiler flags
          if [ "${{ matrix.arch }}" = "amd64" ]; then
            export ARCH_FLAGS="-arch x86_64"
            export LUA_PREFIX="/tmp/lua-x86_64"
          else
            export ARCH_FLAGS="-arch arm64"
            export LUA_PREFIX="/tmp/lua-arm64"
          fi

          # Build Lua with specific architecture
          make clean || true
          make CC="clang ${ARCH_FLAGS}" AR="ar rcu" RANLIB="ranlib" macosx
          make install INSTALL_TOP="${LUA_PREFIX}"

          # Create pkg-config file for our custom Lua build
          mkdir -p "${LUA_PREFIX}/lib/pkgconfig"
          cat > "${LUA_PREFIX}/lib/pkgconfig/lua5.4.pc" << EOF
          prefix=${LUA_PREFIX}
          exec_prefix=\${prefix}
          libdir=\${exec_prefix}/lib
          includedir=\${prefix}/include

          Name: Lua
          Description: An Extensible Extension Language
          Version: 5.4.7
          Requires:
          Libs: -L\${libdir} -llua -lm
          Cflags: -I\${includedir}
          EOF

          # Verify the build
          file "${LUA_PREFIX}/bin/lua"
          "${LUA_PREFIX}/bin/lua" -v

      - name: Build macOS binary
        env:
          GOOS: darwin
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 1
        run: |
          # Set architecture-specific paths
          if [ "${{ matrix.arch }}" = "amd64" ]; then
            export LUA_PREFIX="/tmp/lua-x86_64"
            export ARCH_FLAGS="-arch x86_64"
          else
            export LUA_PREFIX="/tmp/lua-arm64"
            export ARCH_FLAGS="-arch arm64"
          fi

          # Set PKG_CONFIG_PATH to find our custom Lua
          export PKG_CONFIG_PATH="${LUA_PREFIX}/lib/pkgconfig:$PKG_CONFIG_PATH"

          # Set CGO flags for static linking
          export CGO_CFLAGS="-I${LUA_PREFIX}/include ${ARCH_FLAGS}"
          export CGO_LDFLAGS="${ARCH_FLAGS} -L${LUA_PREFIX}/lib -llua -lm -framework CoreMIDI -framework CoreFoundation"

          # Verify pkg-config can find our Lua
          pkg-config --exists lua5.4 && echo "pkg-config found lua5.4" || echo "pkg-config failed to find lua5.4"
          pkg-config --cflags lua5.4 || echo "Failed to get cflags"
          pkg-config --libs lua5.4 || echo "Failed to get libs"

          # Build the binary
          go build -tags lua54 -ldflags "-s -w" -o seq-darwin-${{ matrix.arch }}

          # Verify the binary architecture
          file seq-darwin-${{ matrix.arch }}
          lipo -info seq-darwin-${{ matrix.arch }}

      - name: Verify binary
        run: |
          file seq-darwin-${{ matrix.arch }}
          otool -L seq-darwin-${{ matrix.arch }} || true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: seq-darwin-${{ matrix.arch }}-${{ github.sha }}
          path: seq-darwin-${{ matrix.arch }}

  release:
    if: github.event_name == 'workflow_dispatch'  # Only run on manual trigger
    needs: [build-linux, build-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Verify artifacts
        run: |
          ls -la seq-*
          file seq-* || true

      - name: Create release directories
        run: |
          mkdir -p output/seq_linux_amd64
          mkdir -p output/seq_darwin_amd64
          mkdir -p output/seq_darwin_arm64

          # Move binaries to GoReleaser expected locations
          mv seq-linux-amd64 output/seq_linux_amd64/seq
          mv seq-darwin-amd64 output/seq_darwin_amd64/seq
          mv seq-darwin-arm64 output/seq_darwin_arm64/seq

          # Make them executable
          chmod +x output/*/seq

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          args: release --config .goreleaser.yml --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
