name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  GO_VERSION: '1.24'

jobs:
  # Linux build using Docker for CGO
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Linux binary
        run: |
          docker build -t seq-builder .
          docker create --name seq-temp seq-builder
          docker cp seq-temp:/seq ./seq-linux-amd64
          docker rm seq-temp
          chmod +x seq-linux-amd64

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: seq-linux-amd64
          path: seq-linux-amd64

  # macOS build using native runner
  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: |
          brew install lua
          # Verify installations
          lua -v
          pkg-config --exists lua5.4 || pkg-config --exists lua || echo "Lua pkg-config not found"

      - name: Build macOS binary
        env:
          GOOS: darwin
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 1
        run: |
          # Set up environment for Lua linking
          export CGO_LDFLAGS="-framework CoreMIDI -framework CoreFoundation -llua"
          export CGO_CFLAGS="-I$(brew --prefix lua)/include"
          
          # Build the binary
          go build -tags lua54 -ldflags "-s -w" -o seq-darwin-${{ matrix.arch }}
          
          # Verify the binary
          file seq-darwin-${{ matrix.arch }}
          otool -L seq-darwin-${{ matrix.arch }} || true

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: seq-darwin-${{ matrix.arch }}
          path: seq-darwin-${{ matrix.arch }}

  # Create release using GoReleaser
  release:
    needs: [build-linux, build-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Verify artifacts
        run: |
          ls -la seq-*
          file seq-* || true

      - name: Create release directories
        run: |
          mkdir -p dist/linux_linux_amd64_v1
          mkdir -p dist/darwin_darwin_amd64_v1
          mkdir -p dist/darwin_darwin_arm64_v8.0
          
          # Move binaries to GoReleaser expected locations
          mv seq-linux-amd64 dist/linux_linux_amd64_v1/seq
          mv seq-darwin-amd64 dist/darwin_darwin_amd64_v1/seq
          mv seq-darwin-arm64 dist/darwin_darwin_arm64_v8.0/seq
          
          # Make them executable
          chmod +x dist/*/seq

      - name: Create custom GoReleaser config
        run: |
          cat > .goreleaser.release.yml << 'EOF'
          version: 2
          project_name: seq
          
          builds:
            - id: linux
              binary: seq
              goos: [linux]
              goarch: [amd64]
              skip: true  # Skip building, use pre-built
              
            - id: darwin
              binary: seq
              goos: [darwin]
              goarch: [amd64, arm64]
              skip: true  # Skip building, use pre-built
          
          archives:
            - id: default
              builds: [linux, darwin]
              format: tar.gz
              name_template: >-
                {{ .ProjectName }}_{{ .Version }}_{{ title .Os }}_
                {{- if eq .Arch "amd64" }}x86_64
                {{- else if eq .Arch "386" }}i386
                {{- else }}{{ .Arch }}{{ end }}
                {{- if .Arm }}v{{ .Arm }}{{ end }}
              files:
                - README.md
                - LICENSE*
                - config/**/*
          
          checksum:
            name_template: '{{ .ProjectName }}_{{ .Version }}_checksums.txt'
            algorithm: sha256
          
          changelog:
            sort: asc
            use: github
            filters:
              exclude:
                - '^docs:'
                - '^test:'
                - '^chore:'
                - '^ci:'
            groups:
              - title: "Features"
                regexp: "^feat"
                order: 0
              - title: "Bug fixes"
                regexp: "^fix"
                order: 1
              - title: "Others"
                order: 999
          
          release:
            draft: false
            prerelease: auto
            name_template: "{{ .ProjectName }} {{ .Version }}"
            header: |
              ## seq {{ .Version }}
              
              A powerful sequencer with Lua scripting support and MIDI capabilities.
              
              ### Platform Support
              - **Linux**: Built with Docker for maximum compatibility
              - **macOS**: Native builds for both Intel (amd64) and Apple Silicon (arm64)
              
            footer: |
              ## Installation
              
              Download the appropriate binary for your platform from the assets above.
              
              ### Linux
              ```bash
              curl -L -o seq https://github.com/${{ github.repository }}/releases/download/{{ .Version }}/seq_{{ .Version }}_Linux_x86_64.tar.gz
              tar -xzf seq_{{ .Version }}_Linux_x86_64.tar.gz
              chmod +x seq
              ```
              
              ### macOS
              ```bash
              # For Intel Macs
              curl -L -o seq https://github.com/${{ github.repository }}/releases/download/{{ .Version }}/seq_{{ .Version }}_Darwin_x86_64.tar.gz
              
              # For Apple Silicon Macs
              curl -L -o seq https://github.com/${{ github.repository }}/releases/download/{{ .Version }}/seq_{{ .Version }}_Darwin_arm64.tar.gz
              ```
              
              **Thanks to all contributors!**
          EOF

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --config .goreleaser.release.yml --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Optional: Test the binaries
  test-binaries:
    needs: [build-linux, build-macos]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'  # Only run on manual trigger
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Test Linux binary
        run: |
          chmod +x seq-linux-amd64
          ./seq-linux-amd64 --version || echo "Linux binary test completed"

      - name: Test macOS binaries (file check only)
        run: |
          file seq-darwin-amd64
          file seq-darwin-arm64
          echo "macOS binaries verified"